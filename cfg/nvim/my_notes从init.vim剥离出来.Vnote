这个文件没被source， 仅作为采坑笔记

新内容往下面放

        " https://github.com/vim/vim/issues/6793
        " Register % contains the name of the current file.
        " 这3行结果貌似一样, expand和fnamemodify只有细微区别？
        " let $no_vscode = expand('%:h') . "/no_vscode.vim"
        " let $no_vscode = fnamemodify('%',':h') . "/no_vscode.vim"




- expand/扩展/识别 文件名
        都不行:
        " let $has_vscode = fnamemodify($MYVIMRC,':h') . "/has_vscode.vim"
        " let $has_vscode = expand('%:h') . "/has_vscode.vim"
        " let $has_vscode = fnamemodify('%',':h') . "/has_vscode.vim"


        " echom 'has_vscode找到了吗'
        " echom $has_vscode

- autocmd
        " 错误的根源:  作为autocmd的{pat},  ~ 无法expand为家目录 (但echo $no_vscode时又可以）
        let $no_vscode = "~/dotF/cfg/nvim/no_vscode.vim"

        " Note that special characters (e.g., "%", "<cword>") in the ":autocmd"
        " arguments are not expanded when the autocommand is defined.
        " These will be  expanded when the Event is recognized, and the {cmd} is executed.
        " The only  exception is  "<sfile>"
        "
        "
        怎么发现的？

        :augroup wf_reload ， 输出的结果发现， 想要的autocmd定义成功, {pat}是：~/dotF/cfg/nvim/no_vscode.vim

        " let no_vscode = 'hihi'
        " XX 和 $XX 可以独立，看看echo $XX 和 echo XX
        "
        " let no_vscode = 'hihi'
        " XX 和 $XX 可以独立，看看echo $XX 和 echo XX

        " 最终成功的关键一行
        autocmd wf_reload BufWritePost $no_vscode  ++nested   source $MYVIMRC |  echom 'hi'

        " 没那么好：
        autocmd wf_reload BufWritePost no_vscode.vim  ++nested   source $MYVIMRC |  echom 'hi1'
        autocmd wf_reload BufWritePost *no_vscode.vim  ++nested   source $MYVIMRC |  echom 'hi2'

        " 其他想法
        " " 这3个都不行
        " autocmd wf_reload BufWritePost no_vscode   echom '你看'
        " autocmd wf_reload BufWritePost $no_vscode  echom '你看'
        " autocmd wf_reload BufRead     $no_vscode  echom '你看'
        " autocmd wf_reload BufRead    *no_vscode.vim       echom '你看'
        " autocmd wf_reload BufWritePost     $no_vscode       echom ' 能识别了：  $no_vscode （环境变量）'
        " The environment variable is expanded when the autocommand is defined, not when
        " the autocommand is executed.  This is different from the command!

        " 明明别人都说行的啊 https://vi.stackexchange.com/questions/28110/can-i-use-a-variable-in-autocmd-pat
        " 而且最后这行也成功了啊：
        " source $in_vscode
        " 这样可以
        " autocmd wf_reload BufWritePost no_vscode.vim  echom "你看, 能识别$no_vscode:" | echom $no_vscode | echom ' '
        " todo https://vi.stackexchange.com/questions/6830/putting-the-value-of-an-argument-into-part-of-a-regex-in-vimscript

        " todo: 改成在rc.zsh里定义$no_vscode ?
        "
        "
        "
        " ++nested ，老版本中是nested
                    " Problem:    Making an autocommand trigger once is not so easy.
                    " Solution:   Add the ++once argument.  Also add ++nested as an alias for
                                "nested". (Justin M. Keyes, closes #4100)


        " `:autocmd` adds to the list of autocommands regardless of whether they are
                " already present.  When your .vimrc file is sourced twice, the autocommands
                " will appear twice.  To avoid this, define your autocommands in a group, so
                " that you can easily clear them:
                "
        autocmd BufWritePost *dotF/cfg/nvim/** source %   | echom "更新了"."init.vim系列 "| redraw
        代替了:
                                                                                        " 点号拼接字符串
        " autocmd Reload BufWritePost $MYVIMRC    ++nested   source $MYVIMRC | echom "更新了"."init.vim "| redraw
        " autocmd Reload BufWritePost $no_vscode  ++nested   source $MYVIMRC | echom '根据环境变量，改了no_vscode.vim, 加载了init.vim' | redraw
        " autocmd Reload BufWritePost $has_vscode  ++nested  source $MYVIMRC | echom '(改了has_vscode.vim, 更新init.vim)'  | redraw



        " When a function by this name already exists and [!] is
        " not used an error message is given.  There is one
        " exception: When sourcing a script again, a function
        " that was previously defined in that script will be
        " silently replaced.
        " When [!] is used, an existing function is silently
        " replaced.  Unless it is currently being executed, that
        " is an error.
        " NOTE: Use ! wisely.  If used without care it can cause
        " an existing function to be replaced unexpectedly,
        " which is hard to debug.

        " 改了 beautify_wf并保存后， 保存init.vim会说function already exist
        " 些别想着避免这个问题，毕竟很少改init.vim以外的文件.
        " https://github.com/xolox/vim-reload

-  " 禁用netrw，不过应该用不着了。我删掉了对应文件
        " let g:loaded_netrw       = 1
        " let g:netrw_banner=0
        " let g:loaded_netrwPlugin = 1



-  " " 竖着分屏打开help
        " augroup my_filetype_settings
        "     autocmd!
        "     " winnr: 当前window的编号，top winodw是1
        "     " $  表示 last window
        "     autocmd FileType help if winnr('$') > 2 | wincmd K | else | wincmd L | endif
        "     augroup end

        " 1.4 LISTING MAPPINGS                  *map-listing*
        " When listing mappings the characters in the first two columns are:

        "       CHAR    MODE    ~
        "      <Space>  Normal, Visual, Select and Operator-pending
        "     n Normal
        "     v Visual and Select
        "     s Select
        "     x Visual
        "     o Operator-pending
        "     ! Insert and Command-line
        "     i Insert
        "     l ":lmap" mappings for Insert, Command-line and Lang-Arg
        "     c Command-line
        "     t Terminal-Job
        "
        " Just before the {rhs} a special character can appear:
        "     * indicates that it is not remappable
        "     & indicates that only script-local mappings are remappable
        "     @ indicates a buffer-local mapping


" *i_CTRL-X* *insert_expand*
        " CTRL-X enters a sub-mode where several commands can be used.  Most of these
        " commands do keyword completion; see |ins-completion|.


        " no help for <C-X>
        " no help for CTRL-X CRTL-O
        " 这样才行：
        " h i_CTRL-X


" ms-windows
        " 这样可以 不那么死板地 只能用~/AppData/Local/nvim/init.vim来进入windows的nvim, 从而管理插件(
        " windows的nvim和vscode的nvim共用):
        "nvim -u '\\wsl$\Ubuntu\root\dotF\.config\nvim\init.vim'
        " 插件位置:
        " C:\Users\noway\AppData\Local\nvim-data
        " 把wsl下的dotfile发送快捷方式到 ~/AppData/Local/nvim/init.vim , 不行.因为shortcut和软链接还不一样
        " https://superuser.com/questions/253935/what-is-the-difference-between-symbolic-link-and-shortcut


" Return to last edit position when opening files
        " autocmd BufReadPost * normal! g`"zv
        " 有bug:
        "  normal! 表示 Execute Normal mode commands,
        "  [!] :  mappings will not be used.
        "  g`"表示 跳到 the last known position in a file
        "  zv 取消折叠光标所在行
        " 如果: the file is truncated outside of vim, and vim's mark is on a line that no longer exists, vim throws an error. Fixed that with:
        " autocmd BufReadPost * silent! normal! g`"zv
        " 或者:


" 这么写比较啰嗦：
"
" let s:beauty_path = fnamemodify($MYVIMRC, ":p:h") . "/beautify_wf.vim"    " 字符串concat，用点号
" exe 'source ' . s:beauty_path      " 这样不行： source  . s:beauty_path

set virtualedit=insert,block
有了上面那行, 就不需要要了?  :

" toggle virtualedit
    let s:anywhere = 0
    func! Cursor_anywhere_01()
        if s:anywhere == 0
            set virtualedit=all # 会导致光标跳转不舒服
            let s:anywhere = 1
        else
            set virtualedit=
            let s:anywhere = 0
        endif
    endfunc

    nnoremap <Leader>aw :call Cursor_anywhere_01()<cr>
    nnoremap <Leader>ji :call Cursor_anywhere_01()<cr>ji


register/复制粘贴
            " has({feature}  Returns 1 if {feature} is supported, 0 otherwise
            " 对比:
            " exists({expr})	The result is a Number, which is |TRUE| if {expr} is  defined, zero otherwise.
            " For checking if a file exists use |filereadable()|.
        if has('clipboard')  " 确认|clipboard| provider is available  (所以前面说  要先写好 g:clipboard  ??
                                " 此'clipboard'是一个pseudo feature名, 不是g:clipboard这个variable
        " To ALWAYS use the clipboard for ALL operations (instead of  interacting with the '+' and/or '*' registers explicitly)
        " 让unnamed寄存器(") 一直point to 加号寄存器
            " 缺点: 导致vim内粘贴 跟远程传到本地 似的, 很慢:
            " set clipboard=unnamedplus  " 此处的clipboard, 搜帮助时敲 :help 'clipboard' (因为它是一个option, 不是variabel, 也不是feature名
            " set clipboard=unnamedplus,unnamed
                                        " 这会给 * 寄存器也复制一份
            set clipboard^=unnamed,unnamedplus
                        " ^= 表示prepend,  += 表示append  (对于string是这样)
                        " 在linux, windows和mac的behavior一致
        else
            set clipboard=unnamed
                    "  让unnamed寄存器一直point to星号寄存器
        endif

            " 敲"+yy等, 确实会创建目录:
            " let g:clipboard = {
            "                 \ 'name': 'xsel-remote',
            "                 \ 'copy': {
            "                 \   '+': 'mkdir -p /home/wf/.t/cccccccccccccccccccc加',
            "                 \   '*': 'mkdir -p /home/wf/.t/cccccccccccccccccccc星',
            "                 \  },
            "                 \ 'paste': {
            "                 \   '+': 'mkdir -p /home/wf/.t/pppppppppppppppppppppp加',
            "                 \   '*': 'mkdir -p /home/wf/.t/pppppppppppppppppppppp星',
            "                 \ },
            "                 \ 'cache_enabled': 1,
            "                 \}
            "
            "
            "
            " let g:clipboard = {
            "     \   'name': 'myClipboard',
            "     \   'copy': {
            "     \      '+': ['tmux', 'load-buffer', '-'],
            "     \      '*': ['tmux', 'load-buffer', '-'],器

            " let g:clipboard = {
            "     \   'name': 'myClipboard',
            "     \   'copy': {
            "     \      '+': ['tmux', 'load-buffer', '-'],
            "     \      '*': ['tmux', 'load-buffer', '-'],

            "     \    },
            "     \   'paste': {
            "     \      '+': ['tmux', 'save-buffer', '-'],
            "     \      '*': ['tmux', 'save-buffer', '-'],
            "     \   },
            "     \   'cache_enabled': 1,
            "     \ }
            " let g:clipboard = {
            " \ 'name': 'wf_xclip',
            " \ 'copy': {
            " \   '+': ['xclip', '-selection', 'clipboard', '-silent', '-loop', '2'],
            " \   '*': ['xclip', '-selection', 'primary', '-silent', '-loop', '2'],
            " \  },
            " \ 'paste': {
            " \   '+': 'xclip -selection clipboard -out',
            " \   '*': 'xclip -selection primary  -out',
            " \ },
            " \ 'cache_enabled': 1,
            " \}
            " 这样不行
            "     '*': 'echom "wf_paste" ; xclip -selection primary  -out',
            " https://stackoverflow.com/a/67229362/14972148
            "
            "
    " v:register	The name of the register in effect for the current normal mode command
        " v:register 取值情况:
                "  1. if 'clipboard' contains "unnamed" :
                "          echo v:register  输出* (星号)
                "  2. if 'clipboard' contains "unnamedplus":
                "          echo v:register  输出+ (加号)
                "  3. if none is supplied:
                "         echo v:register  输出" (双引号,  default register)
                "
                "
                "
                "
            " xsel:

                    " --input            -i  | read standard input into the selection
                    " --clipboard        -b  | operate on the CLIPBOARD selection
                    " --primary          -p  | operate on the PRIMARY selection (default)
                    " --secondary        -s  | operate on the SECONDARY selection

            " xclip
                    " xclip reads text from standard input or files and makes it available to
                    " other X applications for pasting as an X selection (traditionally with the middle  mouse  button).

                    " The default action is to silently  wait  in  the  background  for `X selection requests (pastes)`
                    " until another X application places data in the clipboard, at which point xclip exits silently.
                    " You can use  the -verbose option to see if and when xclip actually receives
                    " selection requests from other X applications. (TUI的貌似不算)

                            " -selection
                            "      specify which X selection to use,
                            "      options are:
                            "         "primary" to use XA_PRIMARY (default),
                            "         "secondary" for XA_SECONDARY or
                            "         "clipboard"  for XA_CLIPBOARD 这几个大写单词, 半天没搜到出处





